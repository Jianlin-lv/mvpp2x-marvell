PPv2.2 Kernel Module Parameters
===============================

Table of Contents
-----------------
1. Module parameters overview
2. queue_mode module parameter
3. num_cos_queues module parameter
4. rss_mode module parameter
5. default_cpu module parameter
6. cos_classifer module parameter
7. pri_map module parameter
8. default_cos module parameter
9. rx_queue_size module parameter
10. tx_queue_size module parameter
11. uc_filter_max module parameter
12. stats_delay_msec module parameter
13. rx_count module parameter


Module parameters overview
---------------------------
Kernel module parameters (**module_param**) allow drivers to declare parameters that the user can specify on either boot or module load and then have these parameters exposed in the driver as global variables.

**module_param** is common for all ports.

**module_param** could be set in two ways:

	* In u-boot extra_params. Example::

		# set extra_params mvpp2x.queue_mode=1
		# save

	* During module insmod. Example::

		# insmod mvpp2x.ko queue_mode=1

.. _queue_mode:

*queue_mode* module parameter
-----------------------------
**queue_mode** parameter determines the interrupt structure. It has 3 options:

	* 0  – SINGLE_MODE, means single mode (shared) rx interrupt.
	* 1  – MULTI_MODE, means multi mode (RSS) rx interrupt. MULTI_MODE is default mode.
	* 2  - SINGLE_RESOURCE_MODE, means single interrupt and single address space (hif) allocated by kernel.

	.. Note::
		The maximum number of Host Interface (``hifs``) objects that define address space and TX aggregation queue is limited to ``9`` per system, so in systems with more than 8 CPUs, some CPUs will share the same hif.

1) SINGLE_MODE

	In this mode all CPU's will have a common RX interrupt.

	RX smp_affinity could be changed by changing proc/irq/<IRQ>/smp_affinity. For example::

			# echo 1 > proc/irq/160/smp_affinity

	TX interrupt handling in SINGLE_MODE performed as follows:

		* For systems with 8 and less CPUs: A7K, A8K, A8KP Single AP:
			Each online CPU will have his own TX interrupt and all CPU's will have a common RX interrupt.

		* For systems with more than 8 CPUs: A8KP Dual/Quad AP:
			In this case each 2 (or 4) CPU's will share same interrupt for TX done interrupt and same address space (hif) for TX. For example: CPU's 0 and 1 mapped to address space and Interrupt 0, CPU's 2 and 4 mapped to address space and Interrupt 1 and etc.

	.. Note::
		In SINGLE_MODE number of allocated by Kernel hif's equal to ``number of CPU's + 1`` (up to maximum 9 hif's).


2) MULTI_MODE

	In this mode common TX done and RX interrupt is used. Traffic distribution could be changed by RSS feature.

	TX done/RX interrupt handling in MULTI_MODE performed as follows:

		* For systems with 8 and less CPUs: A7K, A8K, A8KP Single AP:
			Each online CPU will have his own TX done and RX common interrupt.

		* For systems with more than 8 CPUs: A8KP Dual/Quad AP:
			CPUs can be splitted to hot and cold CPUs.
				- Hot CPU
					Can receive and send traffic. This CPU has his own interrupt and address space (hif) and supposed to be fast.
				- Cold CPU
					Can only transmit traffic. All Cold CPUs share same Interrupt and address space (hif) and not supposed to be fast. For cold CPUs, TX done Shared type interrupt were added.

			.. Note::
				Number of hot CPU's could be set by rx_count module parameter. Cold and hot CPU's mapping is fixed and cannot be changed.

			Default settings (for system with 16/32 CPUs):
				- CPU 0 to 7 are Hot CPU's.
				- CPU 8 to 15/35 are Cold CPU's.

	.. Note::
		In MULTI_MODE number of allocated by Kernel hif's equal to ``number of CPU's`` (up to maximum 9 hif's).


3) SINGLE_RESOURCE_MODE

	In this mode for TX all CPU's share single address space(hif).
	TX done and RX handled by CPU 0, address space 0 and by single Interrupt.

	.. Note::
		In SINGLE_RESOURCE_MODE number of allocated by Kernel hif's equal to ``1``.

num_cos_queues module parameter
--------------------------------
	- num_cos_queues determinate number of CoS queues. Number of RXQ's and TXQ's depend on num_cos_queues:
		- Number of TXQ's = num_cos_queues * number_of_ports
		- Number of RXQ's if queue singe mode set = num_cos_queues * number_of_ports
		- Number of RXQ's if queue multi mode set = num_cos_queues * number_of_ports * online_cpus
	- Configuration range(1-8): 1-8, default is 4
	- Parameter is common for all ports.
	- Example:

			# insmod mvpp2x.ko num_cos_queues=1


rss_mode module parameter
-----------------------------
	- rss_mode determinate the way to calculate UDP and TCP HASH value for RSS. It has 2 options:
		- 0 – 2 TUPLE, means UDP and TCP packets hash based on 2T
		- 1 – 5 TUPLE, means UDP and TCP packets hash based on 5T
	- Parameter is per port and set for all ports.
	- Default is 2 TUPLE RSS mode.
	- Example:

			# insmod mvpp2x.ko rss_mode=1


default_cpu module parameter
------------------------------
	- default_cpu define default CPU to handle non-IP packets with enabled RSS mode.
	- Parameter is per port and set for all ports.
	- Configuration range: one of online CPU's should be set
	- Example:

			# insmod mvpp2x.ko default_cpu=1


cos_classifer module parameter
-------------------------------
	- cos_classifer determinate CoS classification modes. It has 4 options:
		- 0 – VLAN_PRI mode
			- If system works in this mode, the CoS value equals to their VLAN priority (p-bit). If the packet is untagged, there will be a default CoS value
				assigned to it.
		- 1 – DSCP_PRI mode
			- If system works in this mode, the CoS value is determined by the high 3 bits of DSCP field, that is DSCP[5:3] >> 3. If the packet is non-IP packet,
				there will also a default CoS value assigned to it.
		- 2 – VLAN_DSCP_PRI mode
			- In this mode, if the packet is tagged, VLAN priority is taken as CoS value, if it is IP packet untagged, DSCP priority will be used as DSCP_PRI mode.

			For non-IP packet untagged, the default CoS value will be assigned.
		- 3 – DSCP_VLAN_PRI mode.
			- In this mode, if the packet is IP, DSCP priority is taken as CoS value, if it is non-IP packet but tagged, VLAN priority will be used as VLAN_PRI mode.

			For non-IP packet untagged, the default CoS value will be assigned. CoS value to relevant RX queues mapping done by pri_map parameter for each eth port,
			each nibble of the mapping data will map a CoS value to a RX queue.
	- Parameter is per port and set for all ports.
	- Example:

			# insmod mvpp2x.ko cos_classifer=3


pri_map module parameter
--------------------------
	- pri_map determinate a mapping parameter of 32 bits for each eth port, each nibble of the mapping data will map a CoS value to a RX queue.
	- Parameter is per port and set for all ports.
	- Configuration range: only exist RXQ should be set by pri_map
	- For example, there is mapping data pri_map=0x22221100, it maps cos=0,1 to rxq0, cos=2,3 to rxq1 if num_cos_queues=4:

			# insmod mvpp2x.ko pri_map=0x22221100


default_cos module parameter
-------------------------------
	- default_cos determinate default CoS for untagged packets (VLAN mode) or non-IP packets (DSCP mode)
	- Parameter is per port and set for all ports.
	- Configuration range: one of existing CoS should be set
	- Example:

			# insmod mvpp2x.ko default_cos=3


rx_queue_size module parameter
---------------------------------
	- rx_queue_size define RX descriptors ring size.
	- Parameter is per port and set for all ports.
	- Descriptors ring size range: 16-1024 (in multiples of 16), default is 1024
	- Example:

			# insmod mvpp2x.ko rx_queue_size=512


tx_queue_size module parameter
--------------------------------
	- tx_queue_size define TX descriptors ring size.
	- Parameter is per port and set for all ports.
	- Descriptors ring size range: 32-2048 (in multiples of 16), default is 2048
	- Example:

			# insmod mvpp2x.ko tx_queue_size=512


uc_filter_max module parameter
----------------------------------------------------------------------
	- uc_filter_max determinate maximum UC MAC entries before entering promisc mode.
	- Parameter is common for all ports.
	- uc_filter_max range: 0-33 (in multiples of 4), default is 4


stats_delay_msec module parameter
----------------------------------------------------------------------
	- stats_delay_msec define delay between MAC statistic update in msec units.
	- Parameter is common for all ports.
	- Default parameter is 250 msec

rx_count module parameter
----------------------------------------------------------------------
	- rx_count define number of hot CPU's(number of CPUs that can do RX and TX) in system.
	- Relevant only for A8KP with at least two AP's(16 CPU's and more) and only for MVPP2_QDIST_MULTI_MODE
	- Parameter is common for all ports.
	- Default parameter is 8. Possible parameters are 8, 16 and 32.
